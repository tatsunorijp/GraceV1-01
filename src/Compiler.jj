options{
STATIC = false;
LOOKAHEAD = 3;
FORCE_LA_CHECK = true;
}
PARSER_BEGIN(Compiler)

    import java.io.*;

    public class Compiler{

        /*boolean Menosshort = false; //Saida resumida falso

        public void processa() throws Exception{

            Token t = new Token ();
            do {
                t = getNextToken(); //Obtém o próximo token
                String nomeToken = tokenImage[t.kind]; //guarda o nome do token na string
            } while(t.kind!=0); //condicao de parada: final do arquivo (constante eof 0 )

        }*/

        public static void main(String args[]) throws ParseException{

            try {

                FileInputStream file = new FileInputStream(args[0]);
                Compiler analyzer = new Compiler(file);
                analyzer.programa();
                System.out.println("Compiler execution completed");

            }catch(Throwable e){
                System.out.println(e.getMessage()); //Mensagem de erro léxico (em ingles) mostrando linha e coluna
                System.out.println("Errors detected");
            }
        }
    }

PARSER_END(Compiler)

TOKEN_MGR_DECLS:{ //CONTADOR DE ERROS
        int countLexError = 0;
        public int foundLexError(){
            return countLexError;
        }
}


TOKEN:{ //PALAVRAS RESERVADAS

    <BOOL: "bool">{System.out.println("Reserved word: "+image);}    //1
    |<DEF: "def">{System.out.println("Reserved word: "+image);} //2
    |<ELSE: "else">{System.out.println("Reserved word: "+image);}   //3
    |<FOR: "for">{System.out.println("Reserved word: "+image);} //4
    |<IF: "if">{System.out.println("Reserved word: "+image);}   //5
    |<INT: "int">{System.out.println("Reserved word: "+image);} //6
    |<READ: "read">{System.out.println("Reserved word: "+image);}
    |<RETURN: "return">{System.out.println("Reserved word: "+image);}
    |<CONTINUE: "skip">{System.out.println("Reserved word: "+image);}
    |<STOP: "stop">{System.out.println("Reserved word: "+image);}
    |<STRING: "string">{System.out.println("Reserved word: "+image);}   //11
    |<VAR: "var">{System.out.println("Reserved word: "+image);} //12
    |<WHILE: "while">{System.out.println("Reserved word: "+image);} //13
    |<WRITE: "write">{System.out.println("Reserved word: "+image);} //14
    |<MAIN:"main">{System.out.println("Reserved word: "+image);}    //15
}

TOKEN:{ //SÍMBOLOS
    <LPARENTHESIS: "(">{System.out.println("Symbol: "+image);}  //16
    |<RPARENTHESIS: ")">{System.out.println("Symbol: "+image);} //17
    |<LBRACKET: "[">{System.out.println("Symbol: "+image);}
    |<RBRACKET: "]">{System.out.println("Symbol: "+image);}
    |<LKEYS: "{">{System.out.println("Symbol: "+image);}
    |<RKEYS: "}">{System.out.println("Symbol: "+image);}
    |<COMMA: ",">{System.out.println("Symbol: "+image);}
    |<SEMICOLON: ";">{System.out.println("Symbol: "+image);}
    |<PLUS: "+">{System.out.println("Symbol: "+image);}
    |<MINUS: "-">{System.out.println("Symbol: "+image);}
    |<ASTERISK: "*">{System.out.println("Symbol: "+image);}
    |<SLASH: "/">{System.out.println("Symbol: "+image);}
    |<PERCENT: "%">{System.out.println("Symbol: "+image);}
    |<EQUALS: "==">{System.out.println("Symbol: "+image);}
    |<DIFERENT: "!=">{System.out.println("Symbol: "+image);}
    |<BIGGEREQUAL: ">=">{System.out.println("Symbol: "+image);}
    |<BIGGER: ">">{System.out.println("Symbol: "+image);}
    |<SMALLEREQUAL: "<=">{System.out.println("Symbol: "+image);}
    |<SMALLER: "<">{System.out.println("Symbol: "+image);}
    |<OR: "||">{System.out.println("Symbol: "+image);}
    |<AND: "&&">{System.out.println("Symbol: "+image);}
    |<NEGATION: "!">{System.out.println("Symbol: "+image);}
    |<PLUSEQUAL: "+=">{System.out.println("Symbol: "+image);}
    |<MINUSEQUAL: "-=">{System.out.println("Symbol: "+image);}
    |<ASTERISKEQUAL: "*=">{System.out.println("Symbol: "+image);}
    |<DIVISIONEQUAL: "/=">{System.out.println("Symbol: "+image);}
    |<PERCENTEQUAL: "%=">{System.out.println("Symbol: "+image);}
    |<EQUAL: "=">{System.out.println("Symbol: "+image);}
    |<QUESTION: "?">{System.out.println("Symbol: "+image);}
    |<COLON: ":">{System.out.println("Symbol: "+image);}
}

TOKEN:{ //PRIMITIVOS
    <NUMBER: ["1"-"9"] (["0"-"9"])* >{System.out.println("Number: "+image);}
    |<BOOLEAN: "true" | "false"> {System.out.println("Boolean: "+image);}
    |<WORD: "\"" (~["\""])* "\"" > {System.out.println("Word: "+image);}
    |<IDENTIFIER: ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "0"-"9", "_"])*>{System.out.println("Identifier: "+image);}
}

SKIP:{ // TOKENS IGNORADOS
     " "
    | "\r"
    | "\t"
    | "\n"
    | <COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

/*       TOKEN: { <OPEN_STRING: "\"">{System.out.println("Open String: "+image);}: WORD }
<WORD> TOKEN: { <STRING_BODY: ("\\\\" | "\\\"" | ~["\"", "\\"])+>{System.out.println("String Body: "+image);} }
<WORD> TOKEN: { <CLOSE_STRING: "\"">{System.out.println("Close String: "+image);}: DEFAULT }*/

/*SPECIAL_TOKEN:{
<INVALIDO_LEXICO:(~[" ","\t","\n","\r","\f"])+>
{
    countLexError++;
    System.err.println("Linha " + input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+
    " Token invalido encontrado: " + image + " "+"TOTAL DE ERROS "+countLexError);
    System.out.println("Erro Lexico ------> "+image);
}
}*/


/////////////////////////////////////////////////////PROGRAMA
void programa():
{}
{
    dec() [dec()] <EOF>
}

/////////////////////////////////////////////////////DECLARAÇÃO DE CORPO
void dec():
{}
{

    decVar() | decSub()
}

/////////////////////////////////////////////////////DECLARAÇÃO DE VARIÁVEL
void decVar():
{}
{
    <VAR> listaSpecVars() <COLON> tipo() <SEMICOLON>
}

void listaSpecVars():
{}
{
    specVar() [<COMMA> specVar()]
}

void tipo():
{}
{

    <STRING>|<INT>{System.out.println("kind: " + token.kind);}|<BOOL>
}

///////////////////////////////////////////////////////////// FATORAÇÃO A ESQUERDA
void specVar():
{}
{
    <IDENTIFIER> [specVarSimplesInit() | specVarArranjo()]
}


void specVarSimplesInit():
{}
{
    <EQUAL> valor()
}

void specVarArranjo():
{}{
    <LBRACKET> <NUMBER> <RBRACKET> [specVarArranjoInit()]
}

void specVarArranjoInit():
{}
{
    <EQUAL> valorArranjo()
}

void valorArranjo():
{}
{
    valorArranjoNumber()|valorArranjoBoolean()|valorArranjoString()
}

void valor():
{}
{
    <BOOLEAN>|<NUMBER>|<WORD>
}

void valorArranjoNumber():
{}
{
    <NUMBER> [<COMMA> valorArranjoNumber()] <SEMICOLON>
}

void valorArranjoBoolean():
{}
{
    <BOOLEAN> [<COMMA> valorArranjoBoolean()] <SEMICOLON>
}
void valorArranjoString():
{}
{
    <WORD> [<COMMA> valorArranjoString()] <SEMICOLON>
}


/////////////////////////////////////////////////////////////DECLARAÇÃO DE SUBPROGRAMAS
void decSub():
{}
{

    <DEF> <IDENTIFIER> <LPARENTHESIS> (listaParametros()) <RPARENTHESIS> (decProc() | decFunc())
    //decProc() | decFunc()
}

void decProc():
{}
{
    bloco()
    //<DEF> <IDENTIFIER> <LPARENTHESIS> (listaParametros()) <RPARENTHESIS> bloco()
}

void decFunc():
{}
{
    tipo() bloco()
    //<DEF> <IDENTIFIER> <LPARENTHESIS> (listaParametros()) <RPARENTHESIS> tipo() bloco()
}

/////////////////////////////////////////////////////////////LISTA DE PARÂMETROS
void listaParametros():
{}
{
    specParams() [<SEMICOLON> specParams()]
}

void specParams():
{}
{
    param() [<COMMA> param()] <COLON> tipo()
}

void param():
{}
{
    //<IDENTIFIER> | <IDENTIFIER> <LBRACKET><RBRACKET>
    <IDENTIFIER> [<LBRACKET><RBRACKET>]
}

/////////////////////////////////////////////////////////////COMANDOS SIMPLES E BLOCOS DE COMANDOS
void comando():
{}
{
    cmdSimples() | bloco()
}

void cmdSimples():
{}{
    cmdAtrib() | cmdIf() | cmdWhile() | cmdFor() | cmdStop() | cmdSkip() |
    cmdReturn() | cmdChamadaProc() | cmdRead() | cmdWrite()
}

void bloco():
{}{
    <LKEYS> [dec()] [comando()] <RKEYS>
}

/////////////////////////////////////////////////////////////ATRIBUIÇÃO
void cmdAtrib():
{}
{
    atrib() <SEMICOLON>
}

void atrib():
{}
{
    variavel() (<EQUAL> | <PLUSEQUAL> | <MINUSEQUAL> | <ASTERISKEQUAL> | <DIVISIONEQUAL> | <PERCENTEQUAL>) expressao()
}

/////////////////////////////////////////////////////////////CONDICIONAL IF
void cmdIf():
{}
{
    <IF> <LPARENTHESIS> expressao() <RPARENTHESIS> comando() [<ELSE> comando()]
}

/////////////////////////////////////////////////////////////COMANDO WHILE
void cmdWhile():
{}
{
    <WHILE> <LPARENTHESIS> expressao() <RPARENTHESIS> comando()
}

/////////////////////////////////////////////////////////////LAÇO FOR
//fazer atribIni e atribPasso
void cmdFor():
{}
{
    <FOR> <LPARENTHESIS> atribIni() <SEMICOLON> expressao() <SEMICOLON> atribPasso() <RPARENTHESIS> comando()
}

void atribIni():
{}
{
    <IDENTIFIER> <EQUAL> <NUMBER>
}

void atribPasso():
{}
{
    <IDENTIFIER>
    (<MINUSEQUAL>|<MINUS>|<BIGGEREQUAL>|<BIGGER>|<EQUALS>|<DIFERENT>)
    <NUMBER>
}

/////////////////////////////////////////////////////////////INTERRUPÇÃO DE LAÇO
void cmdStop():
{}
{
    <STOP><SEMICOLON>
}

/////////////////////////////////////////////////////////////SALTO DE ITERAÇÃO DE LAÇO
void cmdSkip():
{}
{
    <CONTINUE><SEMICOLON>
}

/////////////////////////////////////////////////////////////RETORNO DE SUBPROGRAMA
void cmdReturn():
{}
{
    <RETURN> expressao() <SEMICOLON>
}

/////////////////////////////////////////////////////////////CHAMADA DE PROCEDIMENTO
void cmdChamadaProc():
{}
{
    <IDENTIFIER> <LPARENTHESIS> (expressao() [<COLON> expressao()]) <RPARENTHESIS> <SEMICOLON>
}

/////////////////////////////////////////////////////////////ENTRADA READ
void cmdRead():
{}
{
    <READ> variavel() <SEMICOLON>
}

/////////////////////////////////////////////////////////////SAIDA WRITE
void cmdWrite():
{}
{
    <WRITE> expressao() [<COLON> expressao()] <SEMICOLON>
}

void variavel():
{}
{
    <IDENTIFIER> variavelPartTwo()
}

void variavelPartTwo():
{}
{
    [ <IDENTIFIER> <RBRACKET> expressao() <LBRACKET> ]
}


//////////////////////////////////////////////////////////// EXPRESSÁO

void operadorTern():
{}
{
    expressao() <QUESTION> expressao() <COLON> expressao()
}

void expressao() : {}
{
    LogicalOR() //| operadorTern()
}

void LogicalOR() : {}
{
    LogicalAND() ( <OR> LogicalOR())*
}

void LogicalAND() : {}
{
    RelativeExpression2() ( <AND> RelativeExpression2())*
}

void RelativeExpression2() : {}
{
    RelativeExpression() (( <EQUALS> | <DIFERENT> ) RelativeExpression())*
}

void RelativeExpression() : {}
{
    AdditiveExpression() ( ( <MINUSEQUAL> | <SMALLER> | <BIGGEREQUAL> | <BIGGER> ) AdditiveExpression())*
}

void AdditiveExpression() : {}
{
  MultiplicativeExpression() ( ( <PLUS> | <MINUS> ) MultiplicativeExpression() )*
}

void MultiplicativeExpression() : {}
{
    UnaryExpression() ( ( <ASTERISK> | <SLASH> | <PERCENT> ) UnaryExpression() )*
}

void UnaryExpression() : {}
{
  <LPARENTHESIS> expressao() <RPARENTHESIS> | NumberOrBool() | FuncCallOrIdentifier()
}

void FuncCallOrIdentifier():{}
{
    <IDENTIFIER> [FuncCall()]
}

void FuncCall() : {}
{
    /*<IDENTIFIER> */<LPARENTHESIS> (expressao() [<COLON> expressao()]) <RPARENTHESIS> <SEMICOLON>
}

/*void Identifier() : {}
{
  <IDENTIFIER>
}*/

//  ADICIONADO SEMICOLON NO FINAL DESSAS TRES FUNÇÕES
void NumberOrBool() : {}
{
    //[<MINUS> | <NEGATION>] (<NUMBER> | <BOOL>)
    Number() | Bool() | <WORD> <SEMICOLON>
}

void Number():{}
{
    [<MINUS>] <NUMBER> <SEMICOLON>
}
void Bool():{}
{
    [<NEGATION>] <BOOL> <SEMICOLON>
}

///////////////////////////////////////////////////////////// OPERADORES:
/*
void operador():
{}
{
       operadorArit() | operadorLogic()
}

void operadorArit():
{}
{
        <NEGATION>
       |<ASTERISK>
       |<SLASH>
       |<PERCENT>
       |<PLUS>
       |<MINUS>
}

void operadorLogic():
{}
{
       <SMALLER>
       |<SMALLEREQUAL>
       |<BIGGER>
       |<BIGGEREQUAL>
       |<EQUALS>
       |<DIFERENT>
       |<AND>
       |<OR>
       |operadorTern()
}*/
